<?php

namespace App\Http\Controllers;

use App\Models\Event;
use App\Models\Registration;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class DashboardController extends Controller
{
    /**
     * Show the application dashboard.
     *
     * @return \Illuminate\Contracts\View\View|\Illuminate\Http\RedirectResponse
     */
    public function index()
    {
        $user = Auth::user();
        
        // Rediriger en fonction du rôle de l'utilisateur
        if ($user->isOrganizer()) {
            return $this->organizerDashboard($user);
        } elseif ($user->isStudent()) {
            return $this->studentDashboard($user);
        }
        
        // Par défaut, rediriger vers la page d'accueil
        return redirect()->route('home');
    }

    /**
     * Afficher le tableau de bord de l'organisateur.
     *
     * @param  \App\Models\User  $user
     * @return \Illuminate\Contracts\View\View
     */
    protected function organizerDashboard($user)
    {
        // Événements à venir organisés par l'utilisateur
        $upcomingEvents = $user->organizedEvents()
            ->upcoming()
            ->withCount('registrations')
            ->orderBy('event_date')
            ->take(5)
            ->get();

        // Événements passés avec statistiques
        $pastEvents = $user->organizedEvents()
            ->where('event_date', '<', now())
            ->withCount('registrations')
            ->orderBy('event_date', 'desc')
            ->take(5)
            ->get();

        // Statistiques globales
        $stats = [
            'total_events' => $user->organizedEvents()->count(),
            'upcoming_events' => $user->organizedEvents()->upcoming()->count(),
            'total_registrations' => $user->organizedEvents()->withCount('registrations')->get()->sum('registrations_count'),
            'recent_registrations' => Registration::whereIn('event_id', $user->organizedEvents()->pluck('id'))
                ->with(['event', 'user'])
                ->latest()
                ->take(5)
                ->get(),
        ];

        return view('dashboard.organizer', [
            'upcomingEvents' => $upcomingEvents,
            'pastEvents' => $pastEvents,
            'stats' => $stats,
        ]);
    }

    /**
     * Afficher le tableau de bord de l'étudiant.
     *
     * @param  \App\Models\User  $user
     * @return \Illuminate\Contracts\View\View
     */
    protected function studentDashboard($user)
    {
        // Prochains événements auxquels l'utilisateur est inscrit
        $upcomingRegistrations = $user->registrations()
            ->with(['event' => function($query) {
                $query->withCount('registrations');
            }])
            ->whereHas('event', function($query) {
                $query->where('event_date', '>=', now());
            })
            ->orderBy('created_at', 'desc')
            ->take(5)
            ->get();

        // Événements passés auxquels l'utilisateur était inscrit
        $pastRegistrations = $user->registrations()
            ->with(['event' => function($query) {
                $query->withCount('registrations');
            }])
            ->whereHas('event', function($query) {
                $query->where('event_date', '<', now());
            })
            ->orderBy('created_at', 'desc')
            ->take(5)
            ->get();

        // Événements recommandés (événements à venir non encore inscrits)
        $recommendedEvents = Event::upcoming()
            ->whereDoesntHave('registrations', function($query) use ($user) {
                $query->where('user_id', $user->id);
            })
            ->where('available_seats', '>', 0)
            ->orderBy('event_date')
            ->take(3)
            ->get();
            
        return view('dashboard.student', [
            'upcomingRegistrations' => $upcomingRegistrations,
            'pastRegistrations' => $pastRegistrations,
            'recommendedEvents' => $recommendedEvents,
        ]);
    }
}
